# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='*';
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='^';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" ${s}";

    printf "%s" "$1$branchName$s"
  else
    return;
  fi;
}

reset="\033[0m";
black="\033[30m";
blue="\033[34m";
cyan="\033[36m";
green="\033[32m";
orange="\033[33m";
purple="\033[35m";
red="\033[31m";
violet="\033[35m";
white="\033[37m";
yellow="\033[33m";

# Set the terminal title to the current working directory.
PS1="\[${yellow}\]\h"; # host
PS1+=" ";
PS1+="\[${reset}\]\w"; # working directory
PS1+="\$(prompt_git \" \[$red\]\")"; # Git repository details
PS1+="\[${white}\] \[${reset}\]"; # `$` (and reset color)
export PS1;
